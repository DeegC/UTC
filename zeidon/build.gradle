description ="""
Domain logic for UTC and the Zeidon objects.

Project name: ${project.name}
"""

configurations {
    repl
    generateTypescriptFiles
}

buildscript {
    repositories{ jcenter() }
    dependencies {
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile( "com.quinsoft.zeidon:zeidon-scala:${versions.zeidon}" ) {
        // Exclude some projects to keep the final .war size down.
        exclude module: 'scala-reflect'
        exclude module: 'httpclient'
        exclude module: 'commons-validator'
    }

    compile( 'org.scala-lang:scala-library:2.12.3' ) {
        exclude module: 'scala-xml_2.12'
    }
    
    compile 'org.xerial:sqlite-jdbc:3.14.2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
    testCompile 'junit:junit:4.12'
    testCompile 'org.scalatest:scalatest_2.12:3.0.4'
    testRuntime 'org.scala-lang.modules:scala-xml_2.12:1.0.5'

    repl 'org.scala-lang:scala-compiler:2.12.3'
    repl "com.quinsoft.zeidon:object-browser:${versions.zeidon}"
    repl 'jline:jline:2.13'

    generateTypescriptFiles "com.quinsoft.zeidon:javascript:${versions.zeidon}"
    generateTypescriptFiles  group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
    generateTypescriptFiles "com.quinsoft.zeidon:object-browser:${versions.zeidon}"
}

task writeClasspath {
    doLast {
        buildDir.mkdirs()
        new File(buildDir, "classpath.txt").text = configurations.runtime.asPath + "\n"
    }
}
	
task generateTypescriptFiles( type: JavaExec ) {
    description 'Generates Typescript files for each LOD.'
    
    def xodDir = file("src/main/resources/utc/bin")
    def typescriptDir = file("../angular/src/app/lod")

    // Set up properties so this only gets executed if an XOD has changed.
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    inputs.files "$xodDir/Configuration.XOD"
    outputs.files typescriptDir

    main = "com.quinsoft.zeidon.javascript.GenerateXodsForTypescript"
    classpath( configurations.generateTypescriptFiles, sourceSets.main.runtimeClasspath, '../conf' )
    standardInput System.in
    args( 'UTC', typescriptDir )
//    jvmArgs( '-Xdebug', '-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y' )
}

jar.dependsOn generateTypescriptFiles

task repl(type:JavaExec) {
  description "Fire up the Scala REPL, start the Zeidon JOE, and create a task."
  
  def initFile = ''

  File.createTempFile("temp",".tmp").with {
    deleteOnExit()
    write '''
       import com.quinsoft.zeidon.standardoe.JavaObjectEngine
       import com.quinsoft.zeidon.scala._

       val oe = JavaObjectEngine.getInstance()
       val task = oe.createTask("UTC")
    '''
    initFile = absolutePath
  }

  main = "scala.tools.nsc.MainGenericRunner"
  classpath( sourceSets.main.runtimeClasspath, '../conf', configurations.repl )
  standardInput System.in
  args( '-i', initFile, '-usejavacp' )
  jvmArgs( '-DSQLITE_ROOT=../sqlite', '-Djline.inputrc=~/.jline.inputrc', '-Xdebug', '-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n' )
}