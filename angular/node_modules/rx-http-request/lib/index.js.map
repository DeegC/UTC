{"version":3,"sources":["lib/index.js"],"names":["_request2","require","Request","_rxjs","internals","Object","assign","_checkRequestParam","request","prototype","toString","call","get","head","post","put","patch","del","defaults","TypeError","RxHttpRequestClass","_request","_classCallCheck","this","options","_ref","_this","args","concat","apply","arguments","method","shift","uri","pop","Observable","create","observer","params","error","response","body","next","complete","_ref2","_call","_ref3","_ref4","_ref5","_ref6","_ref7","_instance","RxHttpRequest","getInstance"],"mappings":"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","file":"lib/index.js","sourcesContent":["'use strict';\n\n// import libraries\nimport * as Request from 'request';\nimport {Observable} from 'rxjs';\n\n// internals object for private methods and attributes\nconst internals = {};\n\n/**\n * Add specific methods and attributes\n */\nObject.assign(internals, {\n\n    /**\n     * Function to check if parameter is a `request` module\n     *\n     * @param request\n     * @private\n     */\n    _checkRequestParam: (request) => {\n\n        if (!request ||\n            Object.prototype.toString.call( request.get ) !== '[object Function]' ||\n            Object.prototype.toString.call( request.head ) !== '[object Function]' ||\n            Object.prototype.toString.call( request.post ) !== '[object Function]' ||\n            Object.prototype.toString.call( request.put ) !== '[object Function]' ||\n            Object.prototype.toString.call( request.patch ) !== '[object Function]' ||\n            Object.prototype.toString.call( request.del ) !== '[object Function]' ||\n            Object.prototype.toString.call( request.defaults ) !== '[object Function]') {\n            throw new TypeError('Parameter must be a valid `request` module API');\n        }\n    }\n});\n\n/**\n * RxHttpRequest definition class\n */\nexport class RxHttpRequestClass {\n\n    /**\n     * Class constructor\n     *\n     * @param _request\n     */\n    constructor(_request) {\n\n        // check parameter\n        internals._checkRequestParam(_request);\n\n        // set request object\n        this._request = _request;\n    }\n\n    /**\n     * Returns private attribute _request\n     * \n     * @returns {*}\n     */\n    get request() {\n\n        return this._request;\n    }\n\n    /**\n     * This method returns a wrapper around the normal rx-http-request API that defaults to whatever options you pass to it.\n     * It does not modify the global rx-http-request API; instead, it returns a wrapper that has your default settings applied to it.\n     * You can call .defaults() on the wrapper that is returned from rx-http-request.defaults to add/override defaults that were previously defaulted.\n     *\n     * @param options\n     *\n     * @returns {RxHttpRequest}\n     */\n    defaults(options) {\n\n        return new RxHttpRequestClass(this.request.defaults(options));\n    }\n\n    /**\n     * Function to do a HTTP request for given method\n     *\n     * @param method\n     * @param uri\n     * @param options\n     *\n     * @returns {Observable}\n     * @private\n     */\n    _call() {\n\n        // create new args array\n        const args = [].concat(...arguments);\n\n        // get all arguments to initialize\n        const method = args.shift();\n        const uri = args.shift();\n        const options = Object.assign({}, args.pop() || {});\n\n        // returns new Observable\n        return Observable.create((observer) => {\n\n            // build params array\n            const params = [].concat(uri, options, (error, response, body) => {\n\n                if (error) {\n                    return observer.error(error);\n                }\n\n                observer.next(Object.assign({}, {response: response, body: body}));\n                observer.complete();\n            });\n\n            // call request method\n            try {\n                this.request[method].apply(this.request, params);\n            }\n            catch(error) {\n                observer.error(error);\n            }\n        });\n    }\n\n    /**\n     * Function to do a GET HTTP request\n     *\n     * @param uri\n     * @param options\n     *\n     * @returns {Observable}\n     */\n    get() {\n\n        // create new args array\n        const args = [].concat(...arguments);\n\n        // get all arguments to initialize\n        const method = 'get';\n        const uri = args.shift();\n        const options = Object.assign({}, args.pop() || {});\n\n        return this._call.apply(this, [].concat(method, uri, options));\n    }\n\n    /**\n     * Function to do a POST HTTP request\n     *\n     * @param uri\n     * @param options\n     *\n     * @returns {Observable}\n     */\n    post() {\n\n        // create new args array\n        const args = [].concat(...arguments);\n\n        // get all arguments to initialize\n        const method = 'post';\n        const uri = args.shift();\n        const options = Object.assign({}, args.pop() || {});\n\n        return this._call.apply(this, [].concat(method, uri, options));\n    }\n\n    /**\n     * Function to do a PUT HTTP request\n     *\n     * @param uri\n     * @param options\n     *\n     * @returns {Observable}\n     */\n    put() {\n\n        // create new args array\n        const args = [].concat(...arguments);\n\n        // get all arguments to initialize\n        const method = 'put';\n        const uri = args.shift();\n        const options = Object.assign({}, args.pop() || {});\n\n        return this._call.apply(this, [].concat(method, uri, options));\n    }\n\n    /**\n     * Function to do a PATCH HTTP request\n     *\n     * @param uri\n     * @param options\n     *\n     * @returns {Observable}\n     */\n    patch() {\n\n        // create new args array \n        const args = [].concat(...arguments);\n\n        // get all arguments to initialize\n        const method = 'patch';\n        const uri = args.shift();\n        const options = Object.assign({}, args.pop() || {});\n\n        return this._call.apply(this, [].concat(method, uri, options));\n    }\n\n    /**\n     * Function to do a DELETE HTTP request\n     *\n     * @param uri\n     * @param options\n     *\n     * @returns {Observable}\n     */\n    delete() {\n\n        // create new args array\n        const args = [].concat(...arguments);\n\n        // get all arguments to initialize\n        const method = 'del';\n        const uri = args.shift();\n        const options = Object.assign({}, args.pop() || {});\n\n        return this._call.apply(this, [].concat(method, uri, options));\n    }\n\n    /**\n     * Function to do a HEAD HTTP request\n     *\n     * @param uri\n     * @param options\n     *\n     * @returns {Observable}\n     */\n    head() {\n\n        // create new args array\n        const args = [].concat(...arguments);\n\n        // get all arguments to initialize\n        const method = 'head';\n        const uri = args.shift();\n        const options = Object.assign({}, args.pop() || {});\n\n        return this._call.apply(this, [].concat(method, uri, options));\n    }\n\n    /**\n     * Returns singleton instance\n     *\n     * @returns {null|RxHttpRequest|*}\n     */\n    static getInstance() {\n\n        // singleton\n        if (!(internals._instance instanceof RxHttpRequestClass)) {\n            Object.assign(internals, { _instance: new RxHttpRequestClass(Request) });\n        }\n\n        return internals._instance;\n    }\n}\n\n/**\n * Export {RxHttpRequestClass} instance\n */\nconst RxHttpRequest = RxHttpRequestClass.getInstance();\nexport {RxHttpRequest};"],"sourceRoot":"/source/"}