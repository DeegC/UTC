{"version":3,"file":"RxHttpRequest.js","sourceRoot":"","sources":["../../../src/lib/RxHttpRequest.ts"],"names":[],"mappings":"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","sourcesContent":["// import libraries\nimport * as request from 'request';\nimport { Buffer } from 'buffer';\n\nimport RequestAPI = request.RequestAPI;\nimport Request = request.Request;\nimport CoreOptions = request.CoreOptions;\nimport RequiredUriUrl = request.RequiredUriUrl;\nimport RequestResponse = request.RequestResponse;\nimport RequestCallback = request.RequestCallback;\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { filter, tap, flatMap, map } from 'rxjs/operators';\nimport { mergeStatic } from 'rxjs/operators/merge';\n\n\nimport { RxCookieJar, Cookie } from './RxCookieJar';\n\n// native javascript's objects typings\ndeclare const Object: any;\n\n/**\n * Class definition\n */\nexport class RxHttpRequest {\n    // private property to store singleton instance\n    private static _instance: RxHttpRequest;\n    // private property to store request API object\n    private _request: RequestAPI<Request, CoreOptions, RequiredUriUrl>;\n\n    /**\n     * Returns singleton instance\n     *\n     * @return {RxHttpRequest}\n     */\n    static instance(): RxHttpRequest {\n        if (!(RxHttpRequest._instance instanceof RxHttpRequest)) {\n            RxHttpRequest._instance = new RxHttpRequest(request);\n        }\n\n        return RxHttpRequest._instance;\n    }\n\n    /**\n     * Class constructor\n     */\n    constructor(req: RequestAPI<Request, CoreOptions, RequiredUriUrl>) {\n        // check request parameter\n        this._checkRequestParam(req);\n\n        // set request object\n        this._request = req;\n    }\n\n    /**\n     * Returns private attribute _request\n     *\n     * @return {RequestAPI<Request, CoreOptions, RequiredUriUrl>}\n     */\n    get request(): RequestAPI<Request, CoreOptions, RequiredUriUrl> {\n        return this._request;\n    }\n\n    /**\n     * This method returns a wrapper around the normal rx-http-request API that defaults to whatever options\n     * you pass to it.\n     * It does not modify the global rx-http-request API; instead, it returns a wrapper that has your default settings\n     * applied to it.\n     * You can _call .defaults() on the wrapper that is returned from rx-http-request.defaults to add/override defaults\n     * that were previously defaulted.\n     *\n     * @param options\n     *\n     * @return {RxHttpRequest}\n     */\n    defaults(options: CoreOptions): RxHttpRequest {\n        return new RxHttpRequest(this._request.defaults(options));\n    }\n\n    /**\n     * Function to do a GET HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     */\n    get(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> this._call.apply(this, [].concat('get', <string> uri,\n            <CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a GET HTTP request and to return a buffer\n     *\n     * @param uri\n     * @param options\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     */\n    getBuffer(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> Observable.create((observer) => {\n            try {\n                this._request.get(<string> uri, <CoreOptions> Object.assign({}, options || {}))\n                    .on('response', (response: RequestResponse) => {\n                        let res: Buffer;\n                        response.on('data', (data: Buffer) => res = res ? Buffer.concat([].concat(res, data)) : data);\n                        response.on('end', _ => {\n                            observer.next(<RxHttpRequestResponse> Object.assign({}, {\n                                response: <RequestResponse> response,\n                                body: <Buffer> res\n                            }));\n                            observer.complete();\n                        });\n                    })\n                    .on('error', error => observer.error(error));\n            } catch (error) {\n                observer.error(error);\n            }\n        });\n    }\n\n    /**\n     * Function to do a POST HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     */\n    post(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> this._call.apply(this, [].concat('post', <string> uri,\n            <CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a PUT HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     */\n    put(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> this._call.apply(this, [].concat('put', <string> uri,\n            <CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a PATCH HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     */\n    patch(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> this._call.apply(this, [].concat('patch', <string> uri,\n            <CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a DELETE HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     */\n    delete(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> this._call.apply(this, [].concat('del', <string> uri,\n            <CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function to do a HEAD HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     */\n    head(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> this._call.apply(this, [].concat('head', <string> uri,\n            <CoreOptions> Object.assign({}, options || {})));\n    }\n\n    /**\n     * Function that creates a new rx cookie jar\n     *\n     * @return {Observable<RxCookieJar>}\n     */\n    jar(): Observable<RxCookieJar> {\n        return <Observable<RxCookieJar>> of(new RxCookieJar(this._request.jar()));\n    }\n\n    /**\n     * Function that creates a new cookie\n     *\n     * @param str {string}\n     *\n     * @return {Observable<Cookie>}\n     */\n    cookie(str: string): Observable<Cookie> {\n        return <Observable<Cookie>> of(this._request.cookie(<string> str));\n    }\n\n    /**\n     * Function to do a HTTP request for given method\n     *\n     * @param method {string}\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse>}\n     *\n     * @private\n     */\n    private _call(method: string, uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse> {\n        return <Observable<RxHttpRequestResponse>> Observable.create((observer) => {\n            of([].concat(<string> uri, <CoreOptions> Object.assign({}, options || {}),\n                <RequestCallback> ((error: any, response: RequestResponse, body: any) => {\n                    of(of(error))\n                        .pipe(\n                            flatMap(obsError =>\n                                mergeStatic(\n                                    obsError\n                                        .pipe(\n                                            filter(_ => !!_),\n                                            tap(err => observer.error(err))\n                                        ),\n                                    obsError\n                                        .pipe(\n                                            filter(_ => !_),\n                                            flatMap(_ =>\n                                                !!response ?\n                                                    <Observable<RequestResponse>> of(response) :\n                                                    _throw(new Error('No response found'))\n                                            ),\n                                            flatMap(_ =>\n                                                of({\n                                                    response: <RequestResponse> _,\n                                                    body: <any> body\n                                                })\n                                            ),\n                                            tap(_ => observer.next(_)),\n                                            tap(_ => observer.complete())\n                                        )\n                                )\n                            )\n                        )\n                        .subscribe(undefined, err => observer.error(err));\n                })))\n                .pipe(\n                    map(_ => this._request[<string> method].apply(<RequestAPI<Request, CoreOptions, RequiredUriUrl>> this._request, _)),\n                )\n                .subscribe(undefined, err => observer.error(err));\n        });\n    }\n\n    /**\n     * Function to check existing function in request API passed in parameter for a new instance\n     *\n     * @param req {RequestAPI<Request, CoreOptions, RequiredUriUrl>}\n     *\n     * @private\n     */\n    private _checkRequestParam(req: RequestAPI<Request, CoreOptions, RequiredUriUrl>) {\n        // check existing function in API\n        if (!req ||\n            Object.prototype.toString.call(req.get) !== '[object Function]' ||\n            Object.prototype.toString.call(req.head) !== '[object Function]' ||\n            Object.prototype.toString.call(req.post) !== '[object Function]' ||\n            Object.prototype.toString.call(req.put) !== '[object Function]' ||\n            Object.prototype.toString.call(req.patch) !== '[object Function]' ||\n            Object.prototype.toString.call(req.del) !== '[object Function]' ||\n            Object.prototype.toString.call(req.defaults) !== '[object Function]' ||\n            Object.prototype.toString.call(req.jar) !== '[object Function]' ||\n            Object.prototype.toString.call(req.cookie) !== '[object Function]') {\n            throw new TypeError('Parameter must be a valid `request` module API');\n        }\n    }\n}\n\n/**\n * Export {RxHttpRequest} instance\n */\nexport const RxHR: RxHttpRequest = RxHttpRequest.instance();\n\n/**\n * Export response interface\n */\nexport interface RxHttpRequestResponse {\n    response: RequestResponse;\n    body: any;\n}\n\n/**\n * Export all initial elements\n */\nexport { RequestAPI, Request, CoreOptions, RequiredUriUrl, RequestResponse };\n"]}